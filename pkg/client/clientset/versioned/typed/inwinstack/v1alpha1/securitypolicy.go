/*
Copyright Â© 2018 Kyle Bai(kyle.b@inwinstack.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/inwinstack/pan-operator/pkg/apis/inwinstack/v1alpha1"
	scheme "github.com/inwinstack/pan-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// SecurityPoliciesGetter has a method to return a SecurityPolicyInterface.
// A group's client should implement this interface.
type SecurityPoliciesGetter interface {
	SecurityPolicies(namespace string) SecurityPolicyInterface
}

// SecurityPolicyInterface has methods to work with SecurityPolicy resources.
type SecurityPolicyInterface interface {
	Create(*v1alpha1.SecurityPolicy) (*v1alpha1.SecurityPolicy, error)
	Update(*v1alpha1.SecurityPolicy) (*v1alpha1.SecurityPolicy, error)
	UpdateStatus(*v1alpha1.SecurityPolicy) (*v1alpha1.SecurityPolicy, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.SecurityPolicy, error)
	List(opts v1.ListOptions) (*v1alpha1.SecurityPolicyList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.SecurityPolicy, err error)
	SecurityPolicyExpansion
}

// securityPolicies implements SecurityPolicyInterface
type securityPolicies struct {
	client rest.Interface
	ns     string
}

// newSecurityPolicies returns a SecurityPolicies
func newSecurityPolicies(c *InwinstackV1alpha1Client, namespace string) *securityPolicies {
	return &securityPolicies{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the securityPolicy, and returns the corresponding securityPolicy object, and an error if there is any.
func (c *securityPolicies) Get(name string, options v1.GetOptions) (result *v1alpha1.SecurityPolicy, err error) {
	result = &v1alpha1.SecurityPolicy{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("securitypolicies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of SecurityPolicies that match those selectors.
func (c *securityPolicies) List(opts v1.ListOptions) (result *v1alpha1.SecurityPolicyList, err error) {
	result = &v1alpha1.SecurityPolicyList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("securitypolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested securityPolicies.
func (c *securityPolicies) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("securitypolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a securityPolicy and creates it.  Returns the server's representation of the securityPolicy, and an error, if there is any.
func (c *securityPolicies) Create(securityPolicy *v1alpha1.SecurityPolicy) (result *v1alpha1.SecurityPolicy, err error) {
	result = &v1alpha1.SecurityPolicy{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("securitypolicies").
		Body(securityPolicy).
		Do().
		Into(result)
	return
}

// Update takes the representation of a securityPolicy and updates it. Returns the server's representation of the securityPolicy, and an error, if there is any.
func (c *securityPolicies) Update(securityPolicy *v1alpha1.SecurityPolicy) (result *v1alpha1.SecurityPolicy, err error) {
	result = &v1alpha1.SecurityPolicy{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("securitypolicies").
		Name(securityPolicy.Name).
		Body(securityPolicy).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *securityPolicies) UpdateStatus(securityPolicy *v1alpha1.SecurityPolicy) (result *v1alpha1.SecurityPolicy, err error) {
	result = &v1alpha1.SecurityPolicy{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("securitypolicies").
		Name(securityPolicy.Name).
		SubResource("status").
		Body(securityPolicy).
		Do().
		Into(result)
	return
}

// Delete takes name of the securityPolicy and deletes it. Returns an error if one occurs.
func (c *securityPolicies) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("securitypolicies").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *securityPolicies) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("securitypolicies").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched securityPolicy.
func (c *securityPolicies) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.SecurityPolicy, err error) {
	result = &v1alpha1.SecurityPolicy{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("securitypolicies").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
